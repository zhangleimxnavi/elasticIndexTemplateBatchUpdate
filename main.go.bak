package main

import (
	"context"
	"fmt"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"net/http"
)

//定义多个处理器

type handle1 struct{}

func (h1 *handle1) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "handle one")
}

type handle2 struct{}

func (h2 *handle2) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "handle two")
}

func index1(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "Hello index1")
}

func index2(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintln(w, "Hello index2")
}

func main() {

	config, err := clientcmd.BuildConfigFromFlags("", "./config")
	if err != nil {
		fmt.Println(err)
		return

	}

	clientSet, err := kubernetes.NewForConfig(config)
	if err != nil {
		fmt.Println(err)
		return
	}

	pod, err := clientSet.CoreV1().Pods("default").Get(context.TODO(), "nginx-85b98978db-wk986", v1.GetOptions{})
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(pod.Name, pod.Namespace, pod.Spec.NodeName)

	//------------------------------------------------------

	//config, err := clientcmd.BuildConfigFromFlags("", "./config")
	//if err != nil {
	//	fmt.Println(err)
	//	return
	//}
	//
	//config.GroupVersion = &v1.SchemeGroupVersion
	//config.NegotiatedSerializer = scheme.Codecs
	//config.APIPath = "/api"
	//
	//restClient, err := rest.RESTClientFor(config)
	//if err != nil {
	//	return
	//}
	//
	//pod := v1.Pod{}
	//err2 := restClient.Get().Namespace("default").Resource("pods").Name("nginx-85b98978db-wk986").Do(context.TODO()).Into(&pod)
	//if err2 != nil {
	//	fmt.Println(err2)
	//	return
	//}
	//fmt.Println(pod.Name, pod.Namespace, pod.Spec.NodeName)

	//h1 := handle1{}
	//h2 := handle2{}
	//
	//http.HandleFunc("/1", index1)
	//http.HandleFunc("/2", index2)
	//
	//http.Handle("/3", &h1)
	//http.Handle("/4", &h2)
	//
	//http.ListenAndServe(":8080", nil)

}
